/*
 * File: app/view/ShareholdersWindowViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RiskManagement.view.ShareholdersWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.shareholderswindow',

    onSave: function(button, e, eOpts) {
        var form = this.getReferences().form,
            values = form.getForm().getValues(),
            store = this.getStore('shareholdersModels'),
            corporationId;

        if (form.getForm().findField('IsAccept').getValue() && form.isValid()) {
            Ext.MessageBox.confirm('Confirm', 'คุณต้องการที่จะบันทึก แก้ไขข้อมูล?', function (cbtn, bool) {

                corporationId = values.CorporationId;

                console.log(corporationId);

                form.getForm().findField('CorporationId').setValue(corporationId);

                if (form.isValid()) {

                    //form.submit({
                    //    url: 'api/Shareholders/PostFile',
                    //    //type: 'POST',
                    //    //async: true,
                    //    timeout: 99999,
                    //    success: function (form, action) {

                    //        Ext.Msg.alert('Success', action.response.responseText);
                    //        this.getReferences().grid.getStore().load();

                    //    },
                    //    failure: function (form, action) {
                    //        var obj = Ext.decode(action.response.responseText);

                    //        console.log("test");

                    //        form.reset();


                    //        //Ext.Msg.alert('Risk Status', Ext.decode(action.response.responseText).Result);
                    //        //me.form.getForm().findField('Id').setValue(obj.Id);
                    //        //console.log(me.form.getForm().findField('Id').getValue());

                    //        //Ext.getCmp("saveButton").hide();
                    //        //Ext.getCmp('shareholdersButton').show();
                    //    },
                    //    callback: function (opt, success, respon) {
                    //        Ext.Msg.alert('Risk Status', "callback");
                    //        consoel.log(opt)
                    //    }

                    //});

                } else {

                    console.log(CorporationId);

                }

            }, this);
        } else {
            Ext.Msg.alert("สถานะ", "กรุณาเลือกความยินยอม");
        }//end check 

        

    },

    onCancel: function(button, e, eOpts) {
        //var form = this.getReferences().form;
        //form.close();
        this.getView().close();
    },

    onEditClick: function (button, e, eOpts) {
        var refs = this.getReferences(),
            form = refs.form,
            grid = refs.grid,
            selection = grid.getSelection(),
            record;

        if (selection.length) {

            record = selection[0];
            Ext.Ajax.request({
                url: 'api/Shareholders',
                method: 'GET',
                params: {
                    id: record.get("Id")
                },
                success: function (response) {
                    var text = response.responseText;
                    var data = Ext.create('RiskManagement.model.ShareholdersModel', Ext.decode(text));
                    form.getForm().loadRecord(data);
                    form.getForm().findField('PathFile').allowBlank = true;
                    form.getForm().findField('PathFile1').allowBlank = true;
                }
            });

        }
    },

    onCatelogyChange: function (field, newValue, oldValue, eOpts) {
        var refs = this.getReferences(),
            groupField = refs.groupField,
            typeField = refs.typeField,
            positionField = refs.positionField;
        console.log(newValue);
        console.log(oldValue);
        // Clear selected series value
        if (oldValue != null) {
            groupField.setValue('');
            typeField.setValue('');
            positionField.setValue('');
        }
        var store = groupField.getStore();

        store.clearFilter();
        store.filter('CatelogyId', newValue);


    },

    onGroupChange: function (field, newValue, oldValue, eOpts) {
        var refs = this.getReferences(),
            typeField = refs.typeField,
            positionField = refs.positionField;

        // Clear selected series value
        if (oldValue != null) {
            typeField.setValue('');
            positionField.setValue('');
        }
        var store = typeField.getStore();

        store.clearFilter();
        store.filter('GroupId', newValue);
    },

    onTypeChange: function (field, newValue, oldValue, eOpts) {
        var refs = this.getReferences(),
            positionField = refs.positionField;

        // Clear selected series value
        if (oldValue != null) {
            positionField.setValue('');
        }
        var store = positionField.getStore();

        store.clearFilter();
        store.filter('TypeId', newValue);
    },

    onTakeRisk: function (field, newValue, oldValue, eOpts) {
        var refs = this.getReferences(),
            form = refs.form;

        // Clear selected series value
        if (oldValue != null) {
            positionField.setValue('');
        }
        var store = positionField.getStore();

        store.clearFilter();
        store.filter('TypeId', newValue);
    },

    onGridItemDblClick: function (dataview, record, item, index, e, eOpts) {

        var refs = this.getReferences(),
            form = refs.form;

        Ext.Ajax.request({
            url: 'api/Shareholders',
            method: 'GET',
            params: {
                id: record.get("Id")
            },
            success: function (response) {
                var text = response.responseText;
                console.log(text);
                var data =  Ext.create('RiskManagement.model.ShareholdersModel',Ext.decode(text));
                form.getForm().loadRecord(data);
                form.getForm().findField('PathFile').allowBlank = true;
                form.getForm().findField('PathFile1').allowBlank = true;
            }
        });

    },

    onRequestByID: function (id, form) {
        Ext.Ajax.request({
            url: 'api/Shareholders',
            method: 'GET',
            params: {
                id: id
            },
            success: function (response) {
                var text = response.responseText;
                form.getForm().loadRecord(text);
            }
        });
    },

    onDeleteClick: function (button, e, eOpts) {
        var refs = this.getReferences(),
            grid = refs.grid,
            store = grid.getStore(),
            selecttion = grid.getSelection(),
            ids = [];

        Ext.MessageBox.confirm('Confirm', 'Are you sure you want delete?', function (cbtn, bool) {

            if (cbtn == "yes") {

                for (i = 0; i < selecttion.length; i++) {
                    ids.push(selecttion[i].get('id'));
                    console.log(selecttion[i]);
                    store.remove(selecttion[i]);
                }
                store.sync();
                Ext.MessageBox.alert("Status", "Delete successfull !!");
            }

        }, this);
    }

});
