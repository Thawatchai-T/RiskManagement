/*
 * File: app/view/CorporationlFormViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RiskManagement.view.CorporationlFormViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.corporationlform',

    onSave: function(button, e, eOpts) {
        var me = this,
            form = this.getReferences().form,
            refs = this.getReferences(),
            values = form.getForm().getValues(),
            store = this.getStore('corporationlModels');
            me.form = form;

        //this.getView().down('#btnShareholders').show();
        //me.from.findField("").getValue();
          
            console.log(form.getForm().findField('IsAccept').getValue());

        //if(false)
            if (form.isValid() && form.getForm().findField('IsAccept').getValue()) {
                form.submit({
                    //url: 'home/Upload',
                    url: 'api/Corporation/PostFile',
                    //type: 'POST',
                    async: true,
                    timeout: 99999,
                    success: function (form, action) {

                        Ext.Msg.alert('Success', action.response.responseText);
                        form.findField('Id').setValue(action.respon.responseText)

                    },
                    failure: function (form, action) {
                        //console.log("failure");
                        //console.log(action);
                        var obj = Ext.decode(action.response.responseText);

                        Ext.Msg.alert('Risk Status', "บันทึกข้อมูลเรียบร้อย ");

                        me.form.getForm().findField('Id').setValue(obj.Id);
                        Ext.getCmp("saveButton").hide();
                        Ext.getCmp('shareholdersButton').show();

                        console.log(me.form.getForm().findField('Id').getValue());

                    },
                    callback: function (opt, success, respon) {
                        console.log("callback");
                        Ext.Msg.alert('Risk Status', "callback");
                        consoel.log(opt)
                    }

                });
            } else {

                Ext.Msg.alert("Validate", "กรุณาเลือก ความยินยอมในการเปิดเผบข้อมูลบริษัท");
            }

        

    },

    onShareholdersClick: function(button, e, eOpts) {
        var me = this,
           form = this.getReferences().form;
        me.id = form.getForm().findField('Id').getValue();
        console.log(me.id);
        //TODO: DEBUG
        me.id = 24;

        Ext.widget('shareholderswindow', {
            listeners: {
                close: function (button, eOpts) {
                    Ext.getCmp('takeRiskButton').show();
                },
                beforerender: function (component, eOpts) {
                    //var store = componentd.down('grid').getStore('shareholdersGridViews');

                    //var store = componentd.down('gridpanel').getStore();
                    var store = component.getViewModel().getStore('shareholdersGridViews');
                    var store1 = component.getViewModel().getStore('shareholderForm');
                    store1.load();
                    console.log(store);

                    store.getProxy().extraParams = { id: me.id };
                    store.load();
                    component.down('form').getForm().findField('CorporationId').setValue(me.id);
                }
            }
        });

    },

    onCancel: function(button, e, eOpts) {
        var form = this.getReferences().form;
        form.close();
    },

    onTakeRisk: function (button, e, eOpts) {
        var form = this.getReferences().form,
            id = form.getForm().findField('Id').getValue();
        
        if (id > 0) {
            Ext.Ajax.request({
                url: 'api/Corporation/GetRisk',
                waitTitle: 'Connecting',
                waitMsg: 'Sending data...',
                method: 'get',
                // TODO: debug
                //params: { Id: '24' },
                params: { Id: id },
                success: function (response, request) {
                    Ext.MessageBox.alert('Status', 'ระดับความเสี่ยง:' + response.responseText);
                },
                failure: function (response, request) {
                    Ext.MessageBox.alert('Error', 'เกิดข้อผิดพลาดกรุณาลองใหม่');
                },

            })
        };
    },

    //Occupation

    onCatelogyChange: function (field, newValue, oldValue, eOpts) {
        var refs = this.getReferences(),
            groupField = refs.groupField,
            typeField = refs.typeField,
            positionField = refs.positionField;

        // Clear selected series value
        if (oldValue != null) {
            groupField.setValue('');
            typeField.setValue('');
            positionField.setValue('');
        }
        var store = groupField.getStore();

        store.clearFilter();
        store.filter('CatelogyId', newValue);

    },

    onGroupChange: function (field, newValue, oldValue, eOpts) {
        var refs = this.getReferences(),
            typeField = refs.typeField,
            positionField = refs.positionField;

        // Clear selected series value
        if (oldValue != null) {
            typeField.setValue('');
            positionField.setValue('');
        }
        var store = typeField.getStore();

        store.clearFilter();
        store.filter('GroupId', newValue);
    },

    onTypeChange: function (field, newValue, oldValue, eOpts) {
        var refs = this.getReferences(),
            positionField = refs.positionField;

        // Clear selected series value
        if (oldValue != null) {
            positionField.setValue('');
        }
        var store = positionField.getStore();

        store.clearFilter();
        store.filter('TypeId', newValue);
    },

    //before render
    onBeforeRender: function (component, eOpts) {
        var refs = this.getReferences(),
        OccupationCatelogyField = refs.catelogyField,
        OccupationGroupField = refs.groupField,
        OccupationTypeField = refs.typeField;
        PositionField = refs.positionField;
        
        OccupationCatelogyField.setValue(window.OccupationCatelogyId);

        OccupationGroupField.setValue(window.OccupationGroupId);

        OccupationTypeField.setValue(window.OccupationTypeId);

        PositionField.setValue(window.PositionId);

    },

    onClose:function (component, eOpts) {

        
        Ext.getCmp('takeRiskButton').show();

    }

});
