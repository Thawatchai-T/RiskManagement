/*
 * File: app/store/Combo/OccupationGroupStore.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RiskManagement.store.Combo.OccupationGroupStore', {
    extend: 'Ext.data.Store',
    alias: 'store.occupationgroupstore',

    requires: [
        'RiskManagement.model.Combo.OccupationGroupModel',
        'Ext.data.proxy.Memory'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'Combo.OccupationGroupStore',
            model: 'RiskManagement.model.Combo.OccupationGroupModel',
            data: [
                {
                    Id: 25,
                    Name: 'vel'
                },
                {
                    Id: 459,
                    Name: 'error'
                },
                {
                    Id: 607,
                    Name: 'illum'
                },
                {
                    Id: 324,
                    Name: 'animi'
                },
                {
                    Id: 923,
                    Name: 'dolores'
                },
                {
                    Id: 940,
                    Name: 'dolor'
                },
                {
                    Id: 382,
                    Name: 'molestiae'
                },
                {
                    Id: 439,
                    Name: 'est'
                },
                {
                    Id: 97,
                    Name: 'nobis'
                },
                {
                    Id: 273,
                    Name: 'beatae'
                },
                {
                    Id: 349,
                    Name: 'velit'
                },
                {
                    Id: 157,
                    Name: 'consectetur'
                },
                {
                    Id: 811,
                    Name: 'aspernatur'
                },
                {
                    Id: 602,
                    Name: 'impedit'
                },
                {
                    Id: 790,
                    Name: 'qui'
                },
                {
                    Id: 750,
                    Name: 'sed'
                },
                {
                    Id: 89,
                    Name: 'laudantium'
                },
                {
                    Id: 90,
                    Name: 'et'
                },
                {
                    Id: 966,
                    Name: 'non'
                },
                {
                    Id: 134,
                    Name: 'aut'
                },
                {
                    Id: 309,
                    Name: 'architecto'
                },
                {
                    Id: 324,
                    Name: 'quia'
                },
                {
                    Id: 582,
                    Name: 'neque'
                },
                {
                    Id: 548,
                    Name: 'quia'
                },
                {
                    Id: 586,
                    Name: 'vero'
                },
                {
                    Id: 497,
                    Name: 'in'
                },
                {
                    Id: 135,
                    Name: 'repellendus'
                },
                {
                    Id: 658,
                    Name: 'officiis'
                },
                {
                    Id: 365,
                    Name: 'qui'
                },
                {
                    Id: 308,
                    Name: 'facilis'
                }
            ],
            proxy: {
                type: 'memory'
            }
        }, cfg)]);
    }
});